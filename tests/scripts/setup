#!/bin/ruby
require 'socket'
require 'erb'
require 'json'

SCRIPT_DIR = File.dirname(__FILE__)
$stdout.sync = true

def create_node(opts)
  puts "Creating #{opts['name']}..."
  `puppet apply -e "dockeragent::node { '#{opts['name']}': ensure => present, image => '#{opts['image']}', require_dockeragent => false, }"`
  wait_for_container(opts['name'])
  if opts['sign_cert']
    `puppet cert generate #{opts['name']}`
    `puppet cert sign #{opts['name']}`
    sleep 2
    `cp -f /etc/puppetlabs/puppet/ssl/certs/#{opts['name']}.pem /etc/docker/ssl_dir/`
    `cp -f /etc/puppetlabs/puppet/ssl/public_keys/#{opts['name']}.pem /etc/docker/ssl_dir/public_keys/`
    `cp -f /etc/puppetlabs/puppet/ssl/private_keys/#{opts['name']}.pem /etc/docker/ssl_dir/private_keys/`
  end
end

def run_puppet_on_nodes
  docker_hosts.each do |name, ip|
    #Use a bogus tag to only run pluginsync
    `docker exec -d #{name} puppet agent -t --tags bogus`
  end
end

def wait_for_container(name)
  count = 0
  while !system("docker ps | grep #{name}") && count < 10 do
    count =+ 1
    sleep 2
  end
end

def docker_hosts
  hosts = {}
  containers = `docker ps`.split("\n")
  containers.shift
  containers.each do |line|
    name = line.split.last
    hosts[name] = `docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' #{name}`.chomp
  end
  return hosts
end

def clear_nodes
  hosts = docker_hosts
  hosts.each do |name, ip|
    `systemctl stop docker-#{name}.service`
    `/bin/find /etc/docker/ssl_dir -name #{name}.pem -delete`
    `/opt/puppetlabs/bin/puppet cert clean #{name}`
  end
end

def update_docker_hosts
  hosts = docker_hosts
  fqdn = `facter fqdn`.chomp
hosts_template = <<-HEREDOC
127.0.0.1 <%= fqdn %> learning localhost localhost.localdomain localhost4
::2 localhost localhost.localdomain localhost6 localhost6.localdomain6
<% hosts.each do |name, ip|  %>
<%= ip %> <%= name %>\n
<% end %>
HEREDOC
  puts 'Updating /etc/hosts...'
  hosts_string = ERB.new(hosts_template, 3, '>').result(binding)
  File.write('/etc/hosts', hosts_string)
end

def wait_for_ssh
  puts "Waiting for node SSH services to become available..."
  docker_hosts.each do |name, ip|
    retries = 0
    begin
      Socket.tcp(name, 22, connect_timeout: 5)
    rescue
      sleep 2
      retries +=1
      if retries > 10
        puts "Timed out waiting for node SSH services to become available. Please refer the the Learning VM troubleshooting guide."
        exit 1
      end
      retry
    end
  end
end

def node_setup(quest)
  run_puppet_after = true
  quest_node_hash = JSON.parse(File.read(File.expand_path('./quest_nodes.json', File.dirname(__FILE__))))
  quest_node_hash[quest].each do |node|
    default_opts = {
      'image' => 'agent',
      'sign_cert' => true,
      'run_puppet' => true
    }
    opts = default_opts.merge(node)
    run_puppet_after &= opts['run_puppet']
    create_node(opts)
  end
  update_docker_hosts
  run_puppet_on_nodes if run_puppet_after
  wait_for_ssh
end

clear_nodes
node_setup(ARGV[0])
